package es.weso.rdfshape.server.api.routes

import cats.effect.IO
import cats.implicits._
import com.typesafe.scalalogging.LazyLogging
import es.weso.rdf.jena.RDFAsJenaModel
import es.weso.rdf.nodes.{IRI, Lang}
import es.weso.rdf.{PrefixMap, RDFBuilder, RDFReasoner}
import es.weso.rdfshape.server.api.format.{DataFormat, SchemaFormat}
import es.weso.rdfshape.server.api.results.{DataExtractResult, DataInfoResult}
import es.weso.rdfshape.server.api.routes.Defaults.{
  defaultSchemaEngine,
  defaultSchemaFormat,
  defaultShapeLabel
}
import es.weso.rdfshape.server.api.routes.data.DataParam
import es.weso.rdfshape.server.api.routes.schema.service.{
  SchemaParam,
  TriggerModeParam
}
import es.weso.rdfshape.server.utils.json.JsonUtils.maybeField
import es.weso.schema._
import es.weso.schemaInfer.{InferOptions, PossiblePrefixes, SchemaInfer}
import es.weso.shapemaps.{NodeSelector, ResultShapeMap}
import es.weso.uml.{PlantUMLOptions, Schema2UML, UML}
import es.weso.utils.IOUtils._
import io.circe.Json
import org.http4s.Uri
import org.http4s.client.{Client, JavaNetClientBuilder}

/** Static utils used by several API components
  */
object ApiHelper extends LazyLogging {

  /** Additional options passed down to PlantUML when generating diagrams on the fly.
    */
  val umlOptions = PlantUMLOptions(
    watermark = Some("Generated by [[https://rdfshape.weso.es rdfshape]]")
  )

  /** Long value used as a "no time" value
    */
  private val NoTime = 0L

  /** @param result Schema validation result
    * @return JSON representation of the schema validation result
    */
  def result2json(result: Result): IO[Json] = for {
    emptyRes <- RDFAsJenaModel.empty
    json     <- emptyRes.use(emptyBuilder => result.toJson(emptyBuilder))
  } yield json

  /** Get base URI
    *
    * @return default URI obtained from current folder
    */
  private[api] def getBase: Option[String] = Defaults.relativeBase.map(_.str)

  /** @param prefixMap Input prefix map
    * @return JSON representation of the prefix map
    */
  private[api] def prefixMap2Json(prefixMap: PrefixMap): Json = {
    Json.fromFields(prefixMap.pm.map { case (prefix, iri) =>
      (prefix.str, Json.fromString(iri.getLexicalForm))
    })
  }

  /** @return For a given resource address, attempt to return its contents.
    */
  // TODO: handle timeouts and remove unsafe code
  private[api] def resolveUri(baseUri: Uri, urlStr: String): IO[String] = {
    logger.info(s"Handling Uri: $urlStr")
    Uri
      .fromString(urlStr)
      .fold(
        fail => {
          logger.info(s"Error parsing $urlStr")
          IO.raiseError[String](
            new RuntimeException(
              s"Error resolving $urlStr as URL: ${fail.message}"
            )
          )
        },
        uri => {
          // TODO: The following code is unsafe...
          // implicit val cs: ContextShift[IO] = IO.contextShift(global)
          // implicit val timer: Timer[IO] = IO.timer(global)
          // val blockingPool = Executors.newFixedThreadPool(5)
          // val blocker = Blocker.liftExecutorService(blockingPool)
          val httpClient: Client[IO] = JavaNetClientBuilder[IO].create
          val resolvedUri            = baseUri.resolve(uri)
          logger.info(s"Resolved: $resolvedUri")
          httpClient.expect[String](resolvedUri)
        }
      )
  }

  private[api] def validateStr(
      data: String,
      optDataFormat: Option[DataFormat],
      optSchema: Option[String],
      optSchemaFormat: Option[SchemaFormat],
      optSchemaEngine: Option[String],
      tp: TriggerModeParam,
      optInference: Option[String],
      relativeBase: Option[IRI],
      builder: RDFBuilder
  ): IO[(Result, Option[ValidationTrigger], Long)] = {
    val dp = DataParam.empty.copy(
      data = Some(data),
      dataFormatTextarea = optDataFormat,
      inference = optInference
    )
    val sp = SchemaParam.empty.copy(
      schema = optSchema,
      schemaFormatTextArea = optSchemaFormat,
      schemaEngine = optSchemaEngine
    )

    val result: IO[(Result, Option[ValidationTrigger], Long)] = for {
      pair <- dp.getData(relativeBase)
      (maybeStr, resourceRdf) = pair
      result <- resourceRdf.use(rdf =>
        for {
          pairSchema <- sp.getSchema(Some(rdf))
          (_, eitherSchema) = pairSchema
          schema <- IO.fromEither(
            eitherSchema.leftMap(s =>
              new RuntimeException(s"Error obtaining schema: $s")
            )
          )
          res <- validate(rdf, dp, schema, sp, tp, relativeBase, builder)
        } yield res
      )
    } yield result

    result.attempt.flatMap(_.fold(e => err(e.getMessage), IO.pure))
  }

  private[api] def validate(
      rdf: RDFReasoner,
      dp: DataParam,
      schema: Schema,
      sp: SchemaParam,
      tp: TriggerModeParam,
      relativeBase: Option[IRI],
      builder: RDFBuilder
  ): IO[(Result, Option[ValidationTrigger], Long)] = {
    logger.debug(s"APIHelper: validate")

    val base        = relativeBase.map(_.str) // Some(FileUtils.currentFolderURL)
    val triggerMode = tp.triggerMode
    for {
      pm <- rdf.getPrefixMap
      p  <- tp.getShapeMap(pm, schema.pm)
      (optShapeMapStr, eitherShapeMap) = p
      pair <-
        ValidationTrigger.findTrigger(
          triggerMode.getOrElse(Defaults.defaultTriggerMode),
          optShapeMapStr.getOrElse(""),
          base,
          None,
          None,
          pm,
          schema.pm
        ) match {
          case Left(msg) =>
            err(
              s"Cannot obtain trigger: $triggerMode\nshapeMap: $optShapeMapStr\nmsg: $msg"
            )
          case Right(trigger) =>
            val run = for {
              startTime <- IO {
                System.nanoTime()
              }
              result <- schema.validate(rdf, trigger, builder)
              endTime <- IO {
                System.nanoTime()
              }
              time: Long = endTime - startTime
            } yield (result, Some(trigger), time)
            run.handleErrorWith(e => {
              val msg = s"Error validating: ${e.getMessage}"
              logger.error(msg)
              err(s"Error validating: ${e.getMessage}")
            })
        }
    } yield pair
  }

  private def err(msg: String) =
    IO((Result.errStr(s"Error: $msg"), None, NoTime))

  /* private[server] def query(data: String, optDataFormat: Option[DataFormat],
   * optQuery: Option[String], optInference: Option[String] ): IO[Json] = {
   * optQuery match { case None => IO(Json.Null) case Some(queryStr) => val
   * dataFormat = optDataFormat.getOrElse(defaultDataFormat) val base =
   * Some(IRI(FileUtils.currentFolderURL)) for { basicRdf <-
   * RDFAsJenaModel.fromChars(data, dataFormat.name, base) rdf <-
   * basicRdf.applyInference(optInference.getOrElse("None")) json <-
   * rdf.queryAsJson(queryStr) } yield json } } */
  private[api] def dataExtract(
      rdf: RDFReasoner,
      optData: Option[String],
      optDataFormat: Option[DataFormat],
      optNodeSelector: Option[String],
      optInference: Option[String],
      optEngine: Option[String],
      optSchemaFormat: Option[SchemaFormat],
      optLabelName: Option[String],
      relativeBase: Option[IRI]
  ): IO[DataExtractResult] = {
    val base         = relativeBase.map(_.str)
    val engine       = optEngine.getOrElse(defaultSchemaEngine)
    val schemaFormat = optSchemaFormat.getOrElse(defaultSchemaFormat)
    optNodeSelector match {
      case None =>
        IO.pure(
          DataExtractResult.fromMsg("DataExtract: Node selector not specified")
        )
      case Some(nodeSelector) =>
        val es: ESIO[(Schema, ResultShapeMap)] = for {
          pm       <- io2es(rdf.getPrefixMap)
          selector <- either2es(NodeSelector.fromString(nodeSelector, base, pm))
          eitherResult <- {
            logger.debug(s"Node selector: $selector")

            val inferOptions: InferOptions = InferOptions(
              inferTypePlainNode = true,
              addLabelLang = Some(Lang("en")),
              possiblePrefixMap = PossiblePrefixes.wikidataPrefixMap,
              maxFollowOn = 1,
              followOnLs = List(),
              followOnThreshold = Some(1),
              sortFunction = InferOptions.orderByIRI
            )
            io2es(
              SchemaInfer.runInferSchema(
                rdf,
                selector,
                engine,
                optLabelName.map(IRI(_)).getOrElse(defaultShapeLabel),
                inferOptions
              )
            )
          }
          pair <- either2es(eitherResult)
          str  <- io2es(pair._1.serialize("ShExC"))
          _    <- io2es(IO(logger.debug(s"Extracted; $str")))
        } yield {
          pair
        }
        for {
          either <- run_es(es)
        } yield either.fold(
          err => DataExtractResult.fromMsg(err),
          pair => {
            val (schema, resultShapeMap) = pair
            DataExtractResult.fromExtraction(
              optData,
              optDataFormat,
              schemaFormat.name,
              engine,
              schema,
              resultShapeMap
            )
          }
        )
    }
  }

  private[api] def shapeInfer(
      rdf: RDFReasoner,
      optNodeSelector: Option[String],
      optInference: Option[String],
      optEngine: Option[String],
      optSchemaFormat: Option[SchemaFormat],
      optLabelName: Option[String],
      relativeBase: Option[IRI],
      withUml: Boolean
  ): ESIO[Json] = {
    val base         = relativeBase.map(_.str)
    val engine       = optEngine.getOrElse(defaultSchemaEngine)
    val schemaFormat = optSchemaFormat.getOrElse(defaultSchemaFormat)
    optNodeSelector match {
      case None => ok_es(Json.Null)
      case Some(nodeSelector) =>
        for {
          pm       <- io2es(rdf.getPrefixMap)
          selector <- either2es(NodeSelector.fromString(nodeSelector, base, pm))
          eitherResult <- io2es {
            logger.debug(s"Selector: $selector")

            SchemaInfer.runInferSchema(
              rdf,
              selector,
              engine,
              optLabelName.map(IRI(_)).getOrElse(defaultShapeLabel)
            )
          }
          result <- either2es(eitherResult)
          (schemaInfer, resultMap) = result
          maybePair <-
            if(withUml)
              either2es(Schema2UML.schema2UML(schemaInfer).map(Some(_)))
            else ok_es(None)
          maybeSvg <- io2es(maybePair match {
            case None => IO.pure(None)
            case Some(pair) =>
              val (uml, warnings) = pair
              uml.toSVG(umlOptions).map(Some(_))
          })
          str <- io2es(schemaInfer.serialize(schemaFormat.name))
        } yield Json.fromFields(
          List(
            ("inferredShape", Json.fromString(str)),
            ("format", Json.fromString(schemaFormat.name)),
            ("engine", Json.fromString(engine)),
            ("nodeSelector", Json.fromString(nodeSelector))
          ) ++
            maybeField(
              maybePair,
              "uml",
              (pair: (UML, List[String])) => {
                val (uml, warnings) = pair
                Json.fromString(uml.toPlantUML(umlOptions))
              }
            ) ++
            maybeField(maybeSvg, "svg", Json.fromString)
        )
    }
  }

  private[api] def dataFormatOrDefault(df: Option[String]): String =
    df.getOrElse(DataFormats.defaultFormatName)

  private[api] def dataInfoFromString(
      data: String,
      dataFormatStr: String
  ): IO[Json] = {
    val either: ESIO[Json] = for {
      dataFormat <- either2es(DataFormat.fromString(dataFormatStr))
      json <- io2es(
        RDFAsJenaModel
          .fromChars(data, dataFormat.name)
          .flatMap(_.use(rdf => dataInfo(rdf, Some(data), Some(dataFormat))))
      )
    } yield json

    either.fold(e => DataInfoResult.fromMsg(e).toJson, identity)
  }

  /* private[server] def getSchema(sv: SchemaValue): EitherT[IO,String,Schema] =
   * { val schemaEngine = sv.currentSchemaEngine val schemaFormat =
   * sv.currentSchemaFormat val schemaStr = sv.schema.getOrElse("") val base =
   * Some(FileUtils.currentFolderURL) Schemas.fromString(schemaStr,
   * schemaFormat.name, schemaEngine, base) } */

  private[api] def dataInfo(
      rdf: RDFReasoner,
      data: Option[String],
      dataFormat: Option[DataFormat]
  ): IO[Json] = {
    val either: IO[Either[Throwable, DataInfoResult]] = (for {
      numberStatements <- rdf.getNumberOfStatements()
      predicates       <- rdf.predicates().compile.toList
      pm               <- rdf.getPrefixMap
    } yield DataInfoResult.fromData(
      data,
      dataFormat,
      predicates.toSet,
      numberStatements,
      pm
    )).attempt
    either.map(
      _.fold(e => DataInfoResult.fromMsg(e.getMessage).toJson, _.toJson)
    )
  }

}
